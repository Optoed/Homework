#include <iostream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include <string>
#include <string.h>
#include <cmath>

using namespace std;
using ll = long long; 
//можешь написать typedef long long li; - будет тоже самое, но вот #define просто заменяет одно на другое и не такой умный так что с ним аккуратней


vector<int> operator +(vector<int> a, vector<int> b) {
    vector<int> c(max(a.size(), b.size()));
    for (int i = 0; i < a.size(); i++) {
        c[i] += a[i];
    }
    for (int i = 0; i < b.size(); i++) {
        c[i] += b[i];
    }
    return c;
}


vector<int> operator *(vector<int> a, vector<int> b) {
    vector<int> c(a.size() + b.size() - 1);
    for (int i = 0; i < a.size(); i++) {
        for (int j = 0; j < b.size(); j++) {
            c[i + j] += a[i] * b[j];
        }
    }
    return c;
}


template<class T>
ostream& operator <<(ostream& out, vector<T> a) {
    out << "[";
    for (int i = 0; i < int(a.size()); i++) {
        if (i) {
            out << ", ";
        }
        out << "]";
    }
    return out;
}


template<class A, class B>
ostream& operator <<(ostream& out, pair<A, B> a) {
    return out << "(" << a.first << ", " << a.second << ")";
}


typedef pair<int, int> pt;

struct point {
    int x, y;
};

long long operator %(point a, point b) {
    return a.x * b.y - a.y * b.x;
}

bool operator < (point a, point b) {
    if (a.x != b.x) return a.x < b.x;
    return a.y < b.y;
}

void solve() {
    int n, m;
    cin >> n >> m;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    vector<int> b(n);
    for (int i = 0; i < m; i++) {
        cin >> b[i];
    }



}


int main() {
    int t = 1;
    //cin >> t;
    while (t--) {
        solve();
    }
}
